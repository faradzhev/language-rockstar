scopeName: 'source.rockstar'
name: 'Rockstar'
fileTypes: [
  'rock'
  'rockstar'
]
patterns: [
  {
    # include: '#variable'
  }
  {
    include: '#comment'
  }
  {
    include: '#boolean'
  }
  {
    include: '#null'
  }
  {
    include: '#common'
  }
  {
    include: '#pronoun'
  }
  {
    include: '#number'
  }
  {
    include: '#separator'
  }
  {
    include: '#equal'
  }
  {
    include: '#comparator'
  }
  {
    include: '#loop'
  }
  {
    include: '#conditional'
  }
  {
    include: '#method'
  }
  {
    include: '#io'
  }
  {
    include: '#assignment'
  }
  {
    include: '#arithmetic'
  }

]
repository:
  comment: #WORKS
    patterns: [
      {
        begin: '\\('
        beginCaptures:
          '0':
            name: 'punctuation.definition.comment.begin.rockstar'
        end: '\\)'
        endCaptures:
          '0':
            name: 'punctuation.definition.comment.end.rockstar'
        name: 'punctuation.definition.comment.block.rockstar'
      }
    ]
  boolean: #WORKS
    patterns: [
      {
        match: 'true|false|right|yes|ok|wrong|no($| +)|lies'
        name: 'constant.language.rockstar'
      }
    ]
  null: #WORKS
    patterns: [
      {
        match: 'nothing|nowhere|nobody|null'
        name: 'constant.language.rockstar'
      }
    ]
  common: #WORKS
    patterns: [
      {
        match: '(A|An|The|My|Your)\\i[ ][a-z]+'
        name: 'variable.other.rockstar'
      }
    ]
  variable: #DISABLED
    patterns: [
      {
        match: '(^| +)[a-zA-Z]*($| +)'
        name: 'variable.other.rockstar'
      }
    ]
  pronoun: #TESTING
    patterns: [
      {
        match: '\\b(it|he|she|him|her|them|they)\\b'
        name: 'variable.other.rockstar'
      }
    ]
  number: #TESTING
    patterns: [
      {
        match: "\\d+(\\.\\d*)?|\\.\\d+"
        name: 'constant.numeric.rockstar'
      }
    ]
  separator:
    patterns: [
      {
        begin: '"'
        beginCaptures:
          '0':
            name: 'punctuation.definition.string.begin.rockstar'
        end: '"'
        endCaptures:
          '0':
            name: 'punctuation.definition.string.end.rockstar'
        name: 'punctuation.definition.string.text.rockstar'
      }
      {
        begin: "'"
        beginCaptures:
          '0':
            name: 'punctuation.definition.string.begin.rockstar'
        end: "'"
        endCaptures:
          '0':
            name: 'punctuation.definition.string.end.rockstar'
        name: 'punctuation.definition.string.text.rockstar'
      }
      {
        match: ','
        scope: 'punctuation.definition.separator.rockstar'
      }
    ]
  equal:
    patterns: [
      {
        match: "is( not($| +))?|ain't|was|were"
        name: 'keyword.other.rockstar'
      }
    ]
  comparator: #WORKS
    patterns: [
      {
        match: '(higher|greater|bigger|stronger|lower|less|smaller|weaker) than|as (high|great|big|strong|low|little|small|weak) as'
        name: 'keyword.other.rockstar'
      }
    ]
  loop: #WORKS
    patterns: [
      {
        match: '(^| )(While|Until|Continue|Break it down|break|Take it to the top)($| )'
        name: 'keyword.control.rockstar'
      }
    ]
  conditional: #WORKS
    patterns: [
      {
        match: '(^| )(If|if|Else|else)'
        name: 'keyword.control.conditional.rockstar'
      }
    ]
  method: #TESTING
    patterns: [
      {
        match: 'taking|takes|and|Give back'
        name: 'keyword.other.rockstar'
      }
    ]
  io: #WORKS
    patterns: [
      {
        match: '(^| )(Say|Shout|Whisper|Scream|Listen( to)?)'
        name: 'keyword.other.rockstar'
      }
    ]
  assignment:
    patterns: [
      {
        match: '(^| )(Put|into)($| )'
        name: 'keyword.other.rockstar'
      }
    ]
  arithmetic:
    patterns: [
      {
        match: '(Knock (\\w+) down|Build (\\w+) up|plus|with|minus|without|times|of|over|by)'
        name: 'keyword.other.rockstar'
      }
    ]
